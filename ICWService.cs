/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ICWService {
  public interface ISync {
    byte[] getFullImg(string channel);
    byte[] getRegionImg(string channel, int x0, int y0, int x1, int y1);
    result_t Recognize();
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getFullImg(AsyncCallback callback, object state, string channel);
    byte[] End_getFullImg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRegionImg(AsyncCallback callback, object state, string channel, int x0, int y0, int x1, int y1);
    byte[] End_getRegionImg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_Recognize(AsyncCallback callback, object state);
    result_t End_Recognize(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFullImg(AsyncCallback callback, object state, string channel)
    {
      return send_getFullImg(callback, state, channel);
    }

    public byte[] End_getFullImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFullImg();
    }

    #endif

    public byte[] getFullImg(string channel)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFullImg(null, null, channel);
      return End_getFullImg(asyncResult);

      #else
      send_getFullImg(channel);
      return recv_getFullImg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFullImg(AsyncCallback callback, object state, string channel)
    {
      oprot_.WriteMessageBegin(new TMessage("getFullImg", TMessageType.Call, seqid_));
      getFullImg_args args = new getFullImg_args();
      args.Channel = channel;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFullImg(string channel)
    {
      oprot_.WriteMessageBegin(new TMessage("getFullImg", TMessageType.Call, seqid_));
      getFullImg_args args = new getFullImg_args();
      args.Channel = channel;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public byte[] recv_getFullImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFullImg_result result = new getFullImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFullImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRegionImg(AsyncCallback callback, object state, string channel, int x0, int y0, int x1, int y1)
    {
      return send_getRegionImg(callback, state, channel, x0, y0, x1, y1);
    }

    public byte[] End_getRegionImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRegionImg();
    }

    #endif

    public byte[] getRegionImg(string channel, int x0, int y0, int x1, int y1)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRegionImg(null, null, channel, x0, y0, x1, y1);
      return End_getRegionImg(asyncResult);

      #else
      send_getRegionImg(channel, x0, y0, x1, y1);
      return recv_getRegionImg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRegionImg(AsyncCallback callback, object state, string channel, int x0, int y0, int x1, int y1)
    {
      oprot_.WriteMessageBegin(new TMessage("getRegionImg", TMessageType.Call, seqid_));
      getRegionImg_args args = new getRegionImg_args();
      args.Channel = channel;
      args.X0 = x0;
      args.Y0 = y0;
      args.X1 = x1;
      args.Y1 = y1;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRegionImg(string channel, int x0, int y0, int x1, int y1)
    {
      oprot_.WriteMessageBegin(new TMessage("getRegionImg", TMessageType.Call, seqid_));
      getRegionImg_args args = new getRegionImg_args();
      args.Channel = channel;
      args.X0 = x0;
      args.Y0 = y0;
      args.X1 = x1;
      args.Y1 = y1;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public byte[] recv_getRegionImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRegionImg_result result = new getRegionImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRegionImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_Recognize(AsyncCallback callback, object state)
    {
      return send_Recognize(callback, state);
    }

    public result_t End_Recognize(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Recognize();
    }

    #endif

    public result_t Recognize()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_Recognize(null, null);
      return End_Recognize(asyncResult);

      #else
      send_Recognize();
      return recv_Recognize();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Recognize(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("Recognize", TMessageType.Call, seqid_));
      Recognize_args args = new Recognize_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_Recognize()
    {
      oprot_.WriteMessageBegin(new TMessage("Recognize", TMessageType.Call, seqid_));
      Recognize_args args = new Recognize_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public result_t recv_Recognize()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Recognize_result result = new Recognize_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Recognize failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getFullImg"] = getFullImg_Process;
      processMap_["getRegionImg"] = getRegionImg_Process;
      processMap_["Recognize"] = Recognize_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getFullImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFullImg_args args = new getFullImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFullImg_result result = new getFullImg_result();
      try
      {
        try
        {
          result.Success = iface_.getFullImg(args.Channel);
        }
        catch (ICWException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getFullImg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFullImg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRegionImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRegionImg_args args = new getRegionImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRegionImg_result result = new getRegionImg_result();
      try
      {
        try
        {
          result.Success = iface_.getRegionImg(args.Channel, args.X0, args.Y0, args.X1, args.Y1);
        }
        catch (ICWException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getRegionImg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRegionImg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Recognize_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Recognize_args args = new Recognize_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Recognize_result result = new Recognize_result();
      try
      {
        try
        {
          result.Success = iface_.Recognize();
        }
        catch (ICWException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Recognize", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("Recognize", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFullImg_args : TBase
  {
    private string _channel;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
    }

    public getFullImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFullImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFullImg_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFullImg_result : TBase
  {
    private byte[] _success;
    private ICWException _ex;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ICWException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getFullImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ICWException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFullImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFullImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRegionImg_args : TBase
  {
    private string _channel;
    private int _x0;
    private int _y0;
    private int _x1;
    private int _y1;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public int X0
    {
      get
      {
        return _x0;
      }
      set
      {
        __isset.x0 = true;
        this._x0 = value;
      }
    }

    public int Y0
    {
      get
      {
        return _y0;
      }
      set
      {
        __isset.y0 = true;
        this._y0 = value;
      }
    }

    public int X1
    {
      get
      {
        return _x1;
      }
      set
      {
        __isset.x1 = true;
        this._x1 = value;
      }
    }

    public int Y1
    {
      get
      {
        return _y1;
      }
      set
      {
        __isset.y1 = true;
        this._y1 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool x0;
      public bool y0;
      public bool x1;
      public bool y1;
    }

    public getRegionImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                X0 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Y0 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                X1 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Y1 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRegionImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.x0) {
          field.Name = "x0";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(X0);
          oprot.WriteFieldEnd();
        }
        if (__isset.y0) {
          field.Name = "y0";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Y0);
          oprot.WriteFieldEnd();
        }
        if (__isset.x1) {
          field.Name = "x1";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(X1);
          oprot.WriteFieldEnd();
        }
        if (__isset.y1) {
          field.Name = "y1";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Y1);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRegionImg_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.x0) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("X0: ");
        __sb.Append(X0);
      }
      if (__isset.y0) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Y0: ");
        __sb.Append(Y0);
      }
      if (__isset.x1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("X1: ");
        __sb.Append(X1);
      }
      if (__isset.y1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Y1: ");
        __sb.Append(Y1);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRegionImg_result : TBase
  {
    private byte[] _success;
    private ICWException _ex;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ICWException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getRegionImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ICWException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRegionImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRegionImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Recognize_args : TBase
  {

    public Recognize_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Recognize_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Recognize_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Recognize_result : TBase
  {
    private result_t _success;
    private ICWException _ex;

    public result_t Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ICWException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public Recognize_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new result_t();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ICWException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Recognize_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Recognize_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
