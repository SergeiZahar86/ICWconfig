/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class result_t : TBase
{
  private List<string> _channels;
  private List<string> _numbers;
  private List<bool> _test;
  private string _good;

  public List<string> Channels
  {
    get
    {
      return _channels;
    }
    set
    {
      __isset.channels = true;
      this._channels = value;
    }
  }

  public List<string> Numbers
  {
    get
    {
      return _numbers;
    }
    set
    {
      __isset.numbers = true;
      this._numbers = value;
    }
  }

  public List<bool> Test
  {
    get
    {
      return _test;
    }
    set
    {
      __isset.test = true;
      this._test = value;
    }
  }

  public string Good
  {
    get
    {
      return _good;
    }
    set
    {
      __isset.good = true;
      this._good = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool channels;
    public bool numbers;
    public bool test;
    public bool good;
  }

  public result_t() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Channels = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  Channels.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Numbers = new List<string>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  string _elem5;
                  _elem5 = iprot.ReadString();
                  Numbers.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Test = new List<bool>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  bool _elem8;
                  _elem8 = iprot.ReadBool();
                  Test.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Good = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("result_t");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Channels != null && __isset.channels) {
        field.Name = "channels";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Channels.Count));
          foreach (string _iter9 in Channels)
          {
            oprot.WriteString(_iter9);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Numbers != null && __isset.numbers) {
        field.Name = "numbers";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Numbers.Count));
          foreach (string _iter10 in Numbers)
          {
            oprot.WriteString(_iter10);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Test != null && __isset.test) {
        field.Name = "test";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Bool, Test.Count));
          foreach (bool _iter11 in Test)
          {
            oprot.WriteBool(_iter11);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Good != null && __isset.good) {
        field.Name = "good";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Good);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("result_t(");
    bool __first = true;
    if (Channels != null && __isset.channels) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Channels: ");
      __sb.Append(Channels);
    }
    if (Numbers != null && __isset.numbers) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Numbers: ");
      __sb.Append(Numbers);
    }
    if (Test != null && __isset.test) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Test: ");
      __sb.Append(Test);
    }
    if (Good != null && __isset.good) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Good: ");
      __sb.Append(Good);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

